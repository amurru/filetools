package output

import (
	"fmt"
	"io"
	"path/filepath"
	"sort"
	"strings"
)

// TextFormatter implements the OutputFormatter interface for plain text output
type TextFormatter struct{}

// FormatDuplicates formats duplicate results as plain text (preserves current behavior)
func (f *TextFormatter) FormatDuplicates(result *DuplicateResult, writer io.Writer) error {
	// Add branding header
	if result.Metadata != nil {
		flags := []string{}
		for _, f := range result.Metadata.Flags {
			flags = append(flags, fmt.Sprintf("%s: %s", f.Name, f.Value))
		}
		flagStr := strings.Join(flags, ", ")
		fmt.Fprintf(writer, "Generated by %s %s v%s on %s (%s)\n\n",
			result.Metadata.ToolName,
			result.Metadata.SubCommand,
			result.Metadata.Version,
			result.Metadata.GeneratedAt,
			flagStr)
	}

	if !result.Found {
		fmt.Fprintln(writer, "No duplicate files found.")
		return nil
	}

	fmt.Fprintln(writer, "Duplicate files found:")
	for _, group := range result.Groups {
		// Sort files alphabetically
		files := make([]string, len(group.Files))
		copy(files, group.Files)
		sort.Strings(files)

		sizeStr := "unknown size"
		if group.Size >= 0 {
			sizeStr = fmt.Sprintf("%d bytes", group.Size)
		}

		// Display the first file as the "original"
		hashDisplay := group.Hash
		if len(hashDisplay) > 8 {
			hashDisplay = hashDisplay[:8] + "..."
		}

		fmt.Fprintf(writer, "- %s (size: %s, hash: %s)\n", filepath.Base(files[0]), sizeStr, hashDisplay)
		for _, file := range files {
			fmt.Fprintf(writer, "  - %s\n", file)
		}
		fmt.Fprintln(writer)
	}

	// Output exclusions if any
	if len(result.Exclusions) > 0 {
		fmt.Fprintln(writer, "Excluded files and directories:")
		for _, exclusion := range result.Exclusions {
			fmt.Fprintf(writer, "- %s (%s)\n", exclusion.Path, exclusion.Reason)
		}
		fmt.Fprintln(writer)
	}

	return nil
}

// FormatDirStat formats directory statistics as plain text
func (f *TextFormatter) FormatDirStat(result *DirStatResult, writer io.Writer) error {
	// Add branding header
	if result.Metadata != nil {
		flags := []string{}
		for _, f := range result.Metadata.Flags {
			flags = append(flags, fmt.Sprintf("%s: %s", f.Name, f.Value))
		}
		flagStr := strings.Join(flags, ", ")
		fmt.Fprintf(writer, "Generated by %s %s v%s on %s (%s)\n\n",
			result.Metadata.ToolName,
			result.Metadata.SubCommand,
			result.Metadata.Version,
			result.Metadata.GeneratedAt,
			flagStr)
	}

	// Overall statistics
	fmt.Fprintf(writer, "Directory Statistics\n")
	fmt.Fprintf(writer, "===================\n\n")
	fmt.Fprintf(writer, "Total Files: %d\n", result.TotalFiles)
	fmt.Fprintf(writer, "Total Size: %s\n", formatSize(result.TotalSize))

	if result.LargestFile != nil {
		fmt.Fprintf(writer, "Largest File: %s (%s)\n", result.LargestFile.Path, formatSize(result.LargestFile.Size))
	}
	fmt.Fprintln(writer)

	// File types
	if len(result.FileTypes) > 0 {
		fmt.Fprintf(writer, "File Types\n")
		fmt.Fprintf(writer, "----------\n")
		fmt.Fprintf(writer, "%-15s %-8s %-12s %s\n", "Extension", "Count", "Size", "Percentage")
		fmt.Fprintf(writer, "%-15s %-8s %-12s %s\n", strings.Repeat("-", 15), strings.Repeat("-", 8), strings.Repeat("-", 12), strings.Repeat("-", 10))

		for _, ft := range result.FileTypes {
			fmt.Fprintf(writer, "%-15s %-8d %-12s %.2f%%\n",
				ft.Extension, ft.Count, formatSize(ft.TotalSize), ft.Percentage)
		}
		fmt.Fprintln(writer)
	}

	// Directories
	if len(result.Directories) > 0 {
		fmt.Fprintf(writer, "Subdirectories\n")
		fmt.Fprintf(writer, "--------------\n")
		fmt.Fprintf(writer, "%-50s %-8s %-12s %s\n", "Path", "Files", "Size", "Percentage")
		fmt.Fprintf(writer, "%-50s %-8s %-12s %s\n", strings.Repeat("-", 50), strings.Repeat("-", 8), strings.Repeat("-", 12), strings.Repeat("-", 10))

		for _, dir := range result.Directories {
			path := dir.Path
			if len(path) > 47 {
				path = "..." + path[len(path)-44:]
			}
			fmt.Fprintf(writer, "%-50s %-8d %-12s %.2f%%\n",
				path, dir.FileCount, formatSize(dir.TotalSize), dir.Percentage)
		}
	}

	// Output exclusions if any
	if len(result.Exclusions) > 0 {
		fmt.Fprintln(writer, "\nExcluded files and directories:")
		for _, exclusion := range result.Exclusions {
			fmt.Fprintf(writer, "- %s (%s)\n", exclusion.Path, exclusion.Reason)
		}
	}

	return nil
}

// formatSize formats a size in bytes to human-readable format
func formatSize(size int64) string {
	if size < 1024 {
		return fmt.Sprintf("%d B", size)
	}
	if size < 1024*1024 {
		return fmt.Sprintf("%.1f KB", float64(size)/1024)
	}
	if size < 1024*1024*1024 {
		return fmt.Sprintf("%.1f MB", float64(size)/(1024*1024))
	}
	return fmt.Sprintf("%.1f GB", float64(size)/(1024*1024*1024))
}
